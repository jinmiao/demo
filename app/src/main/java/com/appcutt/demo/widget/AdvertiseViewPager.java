package com.appcutt.demo.widget;import android.content.Context;import android.os.Handler;import android.os.Message;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import com.appcutt.demo.R;import com.appcutt.demo.image.loader.ImageLoaderUtil;import com.appcutt.demo.pojo.AdvertiseBean;import com.appcutt.demo.utils.SystemUtil;import java.util.List;/** * 广告组件 *  * Created by ouyangjinmiao on 5/6/15. */public class AdvertiseViewPager extends LinearLayout {    private ViewPager mViewPager;    /** 广告轮播时间间隔. */    private long mTimeSpan = 6000;    private boolean isRunning = false;    private float mScale = 0.f;    /** 用于控制广告轮播. */    private Handler mHandler = new Handler() {        public void handleMessage(Message msg) {            doBroadcast();        }    };    public AdvertiseViewPager(Context context) {        this(context, null);    }    public AdvertiseViewPager(Context context, AttributeSet attrs) {        super(context, attrs);        LayoutInflater inflater = LayoutInflater.from(context);        inflater.inflate(R.layout.ac_home_advertise_viewpager, this, true);        mViewPager = (ViewPager) findViewById(R.id.viewpager);    }    public void setScale(float scale) {        if (mScale != scale) {            mScale = scale;            requestLayout();        }    }    /**     * 是否已经显示广告，用于判断是否需要重新加载广告     * @return     */    public boolean hasLoadedAdvertise() {        return mViewPager.getAdapter() != null;    }    /**     * setPagerAdapter     *      * @param pagerAdapter     */    public void setPagerAdapter(AdvertisePagerAdapter pagerAdapter) {        mViewPager.setAdapter(pagerAdapter);        // 显示广告，移除默认页面        if (pagerAdapter != null && pagerAdapter.getCount() > 0) {            mViewPager.setVisibility(View.VISIBLE);            findViewById(R.id.defaultad).setVisibility(View.GONE);            ((ViewGroup) findViewById(R.id.defaultad)).removeAllViews();        } else {            findViewById(R.id.defaultad).setVisibility(View.GONE);        }    }    /**     * 设置是否显示屏点，该方法必须在设置完Adapter后调用     *      * @param shouldShow     */    public void setShowIndicator(boolean shouldShow) {        PagerAdapter adapter = mViewPager.getAdapter();        AdvertiseIndicator indicator = new AdvertiseIndicator(getContext(), adapter);        if (adapter != null && adapter.getCount() > 1 && shouldShow) {            ((ViewGroup) findViewById(R.id.indicator)).removeAllViews();            ((ViewGroup) findViewById(R.id.indicator)).addView(indicator);        }        mViewPager.setOnPageChangeListener(indicator);    }    /**     * 设置广告轮播时间间隔     *      * @param timeSpan     */    public void setTimeSpan(long timeSpan) {        this.mTimeSpan = timeSpan;    }    /**     * 启动广告轮播     */    public void startAutoPlay() {        if (isRunning) {            return;        }        PagerAdapter adapter = mViewPager.getAdapter();        if (adapter != null && adapter.getCount() > 1) {            Message message = mHandler.obtainMessage(0);            mHandler.sendMessageDelayed(message, mTimeSpan);            isRunning = true;        }    }    /**     * 停止广告轮播     */    public void stopAutoPaly() {        mHandler.removeMessages(0);        isRunning = false;    }    public List<AdvertiseBean> getData() {        PagerAdapter adapter = mViewPager.getAdapter();        if (adapter != null) {            return ((AdvertisePagerAdapter) adapter).getData();        }        return null;    }    public void clearAllData() {        PagerAdapter adapter = mViewPager.getAdapter();        if (adapter != null) {            ((AdvertisePagerAdapter) adapter).cleanData();        }    }    /**     * 广告轮播     */    private void doBroadcast() {        int curItemIndex = mViewPager.getCurrentItem();        int nextIndex = curItemIndex + 1;        if (nextIndex == mViewPager.getAdapter().getCount()) {            nextIndex = 0;        }        mViewPager.setCurrentItem(nextIndex);    }    /**     * 轮播下一帧，解决手势滑动与轮播冲突     */    private void scheduleNextBoradcast() {        mHandler.removeMessages(0);        Message message = mHandler.obtainMessage(0);        mHandler.sendMessageDelayed(message, mTimeSpan);    }    public static class AdvertisePagerAdapter extends PagerAdapter {        private List<AdvertiseBean> mData;        private Context mContext;        public AdvertisePagerAdapter(Context context, List<AdvertiseBean> data) {            this.mData = data;            this.mContext = context;        }        @Override        public int getCount() {            return mData == null ? 0 : mData.size();        }        public List<AdvertiseBean> getData() {            return mData;        }        @Override        public boolean isViewFromObject(View view, Object obj) {            return view == obj;        }        @Override        public Object instantiateItem(ViewGroup container, int position) {            AdvertiseView advertiseView = new AdvertiseView(mContext);            AdvertiseBean advertiseBean = mData.get(position);            advertiseView.setData(advertiseBean);            ImageLoaderUtil.getImageLoader().displayImage(advertiseBean.photoURL, advertiseView);            ((ViewPager) container).addView(advertiseView);            return advertiseView;        }        @Override        public void destroyItem(ViewGroup container, int position, Object view) {            ((ViewPager) container).removeView((View) view);        }        public void cleanData() {            if (mData != null) {                mData.clear();                notifyDataSetChanged();            }        }    }    /**     * 广告屏点指示     */    public class AdvertiseIndicator extends LinearLayout implements ViewPager.OnPageChangeListener {        public AdvertiseIndicator(Context context, PagerAdapter adapter) {            super(context);            setOrientation(LinearLayout.HORIZONTAL);            for (int i = 0; i < adapter.getCount(); i++) {                View view = createOnePointView(context, i);                addView(view);                LayoutParams params = (LayoutParams) view.getLayoutParams();                params.width = SystemUtil.dip2px(context, 8);                params.height = SystemUtil.dip2px(context, 8);                params.rightMargin = SystemUtil.dip2px(context, 8);                view.setLayoutParams(params);            }        }        @Override        public void onPageSelected(int position) {            for (int i = 0; i < getChildCount(); i++) {                ImageView img = (ImageView) getChildAt(i);                img.setImageResource(position == i ? R.drawable.ht_page_point_select                        : R.drawable.ht_page_point_unselect);            }            // 轮播下一帧，解决手势滑动与轮播冲突            scheduleNextBoradcast();        }        /**         * 默认选中第一个         *          * @param context         * @param index         * @return         */        private View createOnePointView(Context context, int index) {            ImageView view = new ImageView(context);            view.setImageResource(index == 0 ? R.drawable.ht_page_point_select                    : R.drawable.ht_page_point_unselect);            return view;        }        @Override        public void onPageScrollStateChanged(int state) {        }        @Override        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        }    }}